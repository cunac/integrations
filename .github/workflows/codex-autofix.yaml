name: Codex Auto-Fix on Failure

on:
  workflow_run:
    # Trigger this job after any run of the primary CI workflow completes
    workflows: ["Java CI with Gradle"]
    types: [completed]
  # Also allow manual triggering for testing
  workflow_dispatch:
    inputs:
      run_id:
        description: 'Workflow run ID to fix'
        required: false
      branch:
        description: 'Branch to fix'
        required: false
        default: 'test1'

permissions:
  contents: write
  pull-requests: write
  actions: read

jobs:
  auto-fix:
    # Run when workflow failed OR manually triggered
    if: ${{ github.event.workflow_run.conclusion == 'failure' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      FAILED_WORKFLOW_NAME: ${{ github.event.workflow_run.name || 'Manual Trigger' }}
      FAILED_RUN_URL: ${{ github.event.workflow_run.html_url || github.server_url }}/${{ github.repository }}/actions/runs/${{ github.event.inputs.run_id || github.run_id }}
      FAILED_HEAD_BRANCH: ${{ github.event.workflow_run.head_branch || github.event.inputs.branch || github.ref_name }}
      FAILED_HEAD_SHA: ${{ github.event.workflow_run.head_sha || github.sha }}
    steps:
      - name: Check OpenAI API Key Set
        run: |
          if [ -z "$OPENAI_API_KEY" ]; then
            echo "OPENAI_API_KEY secret is not set. Skipping auto-fix." >&2
            exit 1
          fi

      - name: Debug Info
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Workflow conclusion: ${{ github.event.workflow_run.conclusion }}"
          echo "Branch: ${{ env.FAILED_HEAD_BRANCH }}"
          echo "SHA: ${{ env.FAILED_HEAD_SHA }}"

      - name: Checkout Failing Ref
        uses: actions/checkout@v4
        with:
          ref: ${{ env.FAILED_HEAD_SHA }}
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Make gradlew executable
        run: chmod +x gradlew
      - name: Run Codex
        uses: openai/codex-action@main
        id: codex
        with:
          openai_api_key: ${{ secrets.OPENAI_API_KEY }}
          prompt: >-
            You are working in a Java project using Gradle build system with JUnit 5 tests and JaCoCo code coverage.
            The project implements sorting algorithms (BubbleSort and MergeSort) with comprehensive parametrized tests.
            Read the repository, run the test suite with './gradlew test', identify the minimal change needed to make
            all tests pass and meet coverage thresholds (80% overall, 70% per-class), implement only that change,
            and stop. Do not refactor unrelated code or files. Keep changes small and surgical.
          codex_args: '["--config","sandbox_mode=\"workspace-write\""]'
      - name: Verify tests and coverage
        run: ./gradlew test jacocoTestCoverageVerification --no-daemon
      - name: Create pull request with fixes
        if: success()
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "fix(ci): auto-fix failing tests via Codex"
          branch: codex/auto-fix-${{ github.event.workflow_run.run_id }}
          base: ${{ env.FAILED_HEAD_BRANCH }}
          title: "Auto-fix failing CI via Codex"
          body: |
            Codex automatically generated this PR in response to a CI failure on workflow `${{ env.FAILED_WORKFLOW_NAME }}`.
            Failed run: ${{ env.FAILED_RUN_URL }}
            Head branch: `${{ env.FAILED_HEAD_BRANCH }}`
            This PR contains minimal changes intended solely to make the CI pass.
            